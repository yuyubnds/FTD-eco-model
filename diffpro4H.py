import numpy as np
import matplotlib.pyplot as plt

# 设置参数
L = 10.0        # 空间长度
T = 10         # 时间长度
alpha = 0.01    # 热扩散系数
Nx = 8        # 空间离散点数
Ny = 8
Nt = 100     # 时间离散点数
dx = L / (Nx)  # 空间步长
dy = L / (Ny)  # 空间步长
dt = T / Nt        # 时间步长

# 初始化温度分布
x = np.linspace(0, L, Nx)
u = np.sin(np.pi * x / L)  # 初始条件：u(x, 0) = sin(pi * x / L)

ds1 = np.zeros((10, 10), dtype=np.float64)
for i in range(1,9):
    for j in range(1,9):
        if((4-i==0 or i-5==0) or (4-j==0 or j-5==0)):
            ds1[i,j]=0.2
        if((4-i==1 or i-5==1) or (4-j==1 or j-5==1)):
            ds1[i,j]=0.4
        if((4-i==2 or i-5==2) or (4-j==2 or j-5==2)):
            ds1[i,j]=0.2
        if((4-i==3 or i-5==3) or (4-j==3 or j-5==3)):
            ds1[i,j]=0.1

ds2 = np.zeros((10, 10), dtype=np.float64)
for i in range(1,9):
    for j in range(1,9):
        if((4-i==0 or i-5==0) or (4-j==0 or j-5==0)):
            ds2[i,j]=0.8
        if((4-i==1 or i-5==1) or (4-j==1 or j-5==1)):
            ds2[i,j]=0.7
        if((4-i==2 or i-5==2) or (4-j==2 or j-5==2)):
            ds2[i,j]=0.6
        if((4-i==3 or i-5==3) or (4-j==3 or j-5==3)):
            ds2[i,j]=0.7

dss = np.zeros((10, 10), dtype=np.float64)
for i in range(1,9):
    for j in range(1,9):
        if((4-i==0 or i-5==0) or (4-j==0 or j-5==0)):
            dss[i,j]=0.4
        if((4-i==1 or i-5==1) or (4-j==1 or j-5==1)):
            dss[i,j]=0.3
        if((4-i==2 or i-5==2) or (4-j==2 or j-5==2)):
            dss[i,j]=0.2
        if((4-i==3 or i-5==3) or (4-j==3 or j-5==3)):
            dss[i,j]=0.3

# 结果存储
y1 = np.array([[2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938],
[2304835.73545938,2584413.8345901,2587649.91460916,2588454.1541186,2588514.64408667,2588514.64408667,2588454.1541186,2587649.91460916,2584413.8345901,2304835.73545938],
[2304835.73545938,2587649.91460916,2589506.52717941,2592148.47303552,2592326.44441541,2592326.44441541,2592148.47303552,2589506.52717941,2587649.91460916,2304835.73545938],
[2304835.73545938,2588454.1541186,2592148.47303552,2593871.58752679,2594770.85175216,2594770.85175216,2593871.58752679,2592148.47303552,2588454.1541186,2304835.73545938],
[2304835.73545938,2588514.64408667,2592326.44441541,2594770.85175216,2594486.90589633,2594486.90589633,2594770.85175216,2592326.44441541,2588514.64408667,2304835.73545938],
[2304835.73545938,2588514.64408667,2592326.44441541,2594770.85175216,2594486.90589633,2594486.90589633,2594770.85175216,2592326.44441541,2588514.64408667,2304835.73545938],
[2304835.73545938,2588454.1541186,2592148.47303552,2593871.58752679,2594770.85175216,2594770.85175216,2593871.58752679,2592148.47303552,2588454.1541186,2304835.73545938],
[2304835.73545938,2587649.91460916,2589506.52717941,2592148.47303552,2592326.44441541,2592326.44441541,2592148.47303552,2589506.52717941,2587649.91460916,2304835.73545938],
[2304835.73545938,2584413.8345901,2587649.91460916,2588454.1541186,2588514.64408667,2588514.64408667,2588454.1541186,2587649.91460916,2584413.8345901,2304835.73545938],
[2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938,2304835.73545938]]
, dtype=np.float64)
y2 = np.array([[78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769],
[78707.88623769,65470.33061286,60993.15899858,59520.28404383,59949.02067265,59949.02067265,59520.28404383,60993.15899858,65470.33061286,78707.88623769],
[78707.88623769,60993.15899858,53968.12158619,52128.41134988,52866.35255803,52866.35255803,52128.41134988,53968.12158619,60993.15899858,78707.88623769],
[78707.88623769,59520.28404383,52128.41134988,50469.98176534,51500.0975983,51500.0975983,50469.98176534,52128.41134988,59520.28404383,78707.88623769],
[78707.88623769,59949.02067265,52866.35255803,51500.0975983,53508.92602068,53508.92602068,51500.0975983,52866.35255803,59949.02067265,78707.88623769],
[78707.88623769,59949.02067265,52866.35255803,51500.0975983,53508.92602068,53508.92602068,51500.0975983,52866.35255803,59949.02067265,78707.88623769],
[78707.88623769,59520.28404383,52128.41134988,50469.98176534,51500.0975983,51500.0975983,50469.98176534,52128.41134988,59520.28404383,78707.88623769],
[78707.88623769,60993.15899858,53968.12158619,52128.41134988,52866.35255803,52866.35255803,52128.41134988,53968.12158619,60993.15899858,78707.88623769],
[78707.88623769,65470.33061286,60993.15899858,59520.28404383,59949.02067265,59949.02067265,59520.28404383,60993.15899858,65470.33061286,78707.88623769],
[78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769,78707.88623769]]
, dtype=np.float64)
yz = np.array([[34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056],
[34010.86066056,8144.50702408,5729.2940585,5582.45479005,5634.07677534,5634.07677534,5582.45479005,5729.2940585,8144.50702408,34010.86066056],
[34010.86066056,5729.2940585,422.8251695,2166.11465575,2185.16128442,2185.16128442,2166.11465575,422.8251695,5729.2940585,34010.86066056],
[34010.86066056,5582.45479005,2166.11465575,3769.65381011,4035.40123829,4035.40123829,3769.65381011,2166.11465575,5582.45479005,34010.86066056],
[34010.86066056,5634.07677534,2185.16128442,4035.40123829,3110.46627763,3110.46627763,4035.40123829,2185.16128442,5634.07677534,34010.86066056],
[34010.86066056,5634.07677534,2185.16128442,4035.40123829,3110.46627763,3110.46627763,4035.40123829,2185.16128442,5634.07677534,34010.86066056],
[34010.86066056,5582.45479005,2166.11465575,3769.65381011,4035.40123829,4035.40123829,3769.65381011,2166.11465575,5582.45479005,34010.86066056],
[34010.86066056,5729.2940585,422.8251695,2166.11465575,2185.16128442,2185.16128442,2166.11465575,422.8251695,5729.2940585,34010.86066056],
[34010.86066056,8144.50702408,5729.2940585,5582.45479005,5634.07677534,5634.07677534,5582.45479005,5729.2940585,8144.50702408,34010.86066056],
[34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056,34010.86066056]]
, dtype=np.float64)
y3 = np.array([[41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052],
[41534.95826052,34896.5402524,36315.35864906,35738.49168202,34457.51624219,34457.51624219,35738.49168202,36315.35864906,34896.5402524,41534.95826052],
[41534.95826052,36315.35864906,37759.05296411,35692.43062819,33857.4970937,33857.4970937,35692.43062819,37759.05296411,36315.35864906,41534.95826052],
[41534.95826052,35738.49168202,35692.43062819,33389.08749689,30134.77579184,30134.77579184,33389.08749689,35692.43062819,35738.49168202,41534.95826052],
[41534.95826052,34457.51624219,33857.4970937,30134.77579184,27957.63090168,27957.63090168,30134.77579184,33857.4970937,34457.51624219,41534.95826052],
[41534.95826052,34457.51624219,33857.4970937,30134.77579184,27957.63090168,27957.63090168,30134.77579184,33857.4970937,34457.51624219,41534.95826052],
[41534.95826052,35738.49168202,35692.43062819,33389.08749689,30134.77579184,30134.77579184,33389.08749689,35692.43062819,35738.49168202,41534.95826052],
[41534.95826052,36315.35864906,37759.05296411,35692.43062819,33857.4970937,33857.4970937,35692.43062819,37759.05296411,36315.35864906,41534.95826052],
[41534.95826052,34896.5402524,36315.35864906,35738.49168202,34457.51624219,34457.51624219,35738.49168202,36315.35864906,34896.5402524,41534.95826052],
[41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052,41534.95826052]]
, dtype=np.float64)
yd = np.array([[363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502],
 [363587.61935502, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 363587.61935502],
 [363587.61935502, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 363587.61935502],
 [363587.61935502, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 363587.61935502],
 [363587.61935502, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 363587.61935502],
 [363587.61935502, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 363587.61935502],
 [363587.61935502, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 363587.61935502],
 [363587.61935502, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 363587.61935502],
 [363587.61935502, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 330534.19941457, 363587.61935502],
 [363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502, 363587.61935502]]
, dtype=np.float64)
yo=np.array([[100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
 [100, 20, 20, 20, 20, 20, 20, 20, 20, 100],
 [100, 20, 20, 20, 20, 20, 20, 20, 20, 100],
 [100, 20, 20, 20, 20, 20, 20, 20, 20, 100],
 [100, 20, 20, 20, 20, 20, 20, 20, 20, 100],
 [100, 20, 20, 20, 20, 20, 20, 20, 20, 100],
 [100, 20, 20, 20, 20, 20, 20, 20, 20, 100],
 [100, 20, 20, 20, 20, 20, 20, 20, 20, 100],
 [100, 20, 20, 20, 20, 20, 20, 20, 20, 100],
 [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]]
, dtype=np.float64)
ys=np.array([[2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500],
 [2500, 500, 500, 500, 500, 500, 500, 500, 500, 2500],
 [2500, 500, 500, 500, 500, 500, 500, 500, 500, 2500],
 [2500, 500, 500, 500, 500, 500, 500, 500, 500, 2500],
 [2500, 500, 500, 500, 500, 500, 500, 500, 500, 2500],
 [2500, 500, 500, 500, 500, 500, 500, 500, 500, 2500],
 [2500, 500, 500, 500, 500, 500, 500, 500, 500, 2500],
 [2500, 500, 500, 500, 500, 500, 500, 500, 500, 2500],
 [2500, 500, 500, 500, 500, 500, 500, 500, 500, 2500],
 [2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500]]
, dtype=np.float64)
y1_new = np.zeros((10,10), dtype=np.float64)
y2_new = np.zeros((10,10), dtype=np.float64)
y3_new = np.zeros((10,10), dtype=np.float64)
yz_new = np.zeros((10,10), dtype=np.float64)
yd_new = np.zeros((10,10), dtype=np.float64)
yo_new = np.zeros((10,10), dtype=np.float64)
ys_new = np.zeros((10,10), dtype=np.float64)

t = np.zeros(50, dtype=np.float64)

num_1=0

# 时间迭代
for n in range(1, Nt+1):
    y1_new = y1.copy()
    y2_new = y2.copy()
    y3_new = y3.copy()
    yz_new = yz.copy()
    yd_new = yd.copy()
    ys_new = ys.copy()
    yo_new = yo.copy()
    num_1=0
    num_2=0
    num_z=0
    num_3=0
    num_s=0
    num_o=0
    num_d=0
    for i in range(1, Nx + 1):
        for j in range(1, Ny + 1):
            y1_new[i,j] = y1[i,j] + dt / (dx**2) * ds1[i,j] * (-0.4*(yz[i+1,j] - 2*yz[i,j] + yz[i-1,j]) - 0.9*(y2[i+1,j] - 2*y2[i,j] + y2[i-1,j])) + dt / (dy**2) * ds1[i,j] * (-0.4*(yz[i,j+1] - 2*yz[i,j] + yz[i,j-1]) - 0.9*(y2[i,j+1] - 2*y2[i,j] + y2[i,j-1])) + dt*((0.4+0.05*np.sin(n*dt))*y1[i,j]*(1-y1[i,j]/3000000-0.08*yz[i,j]/5000000) - 0.03*y1[i,j] - 0.08/100000*y1[i,j]*y2[i,j])
            yd_new[i,j] = yd[i,j] + dt / (0.05*yd[i,j]*(1-yd[i,j]/500000) + 0.2/10*(0.03*y1[i,j] + 0.08*yz[i,j] + 0.125*y2[i,j] + 0.125*y3[i,j]) - 0.04*yd[i,j])
            yz_new[i,j] = yz[i,j] + dt / (dx**2) * ds1[i,j] * (-0.01*(y1[i+1,j] - 2*y1[i,j] + y1[i-1,j]) - 0.01*(y2[i+1,j] - 2*y2[i,j] + y2[i-1,j])) + dt / (dy**2) * ds1[i,j] * (-0.01*(y1[i,j+1] - 2*y1[i,j] + y1[i,j-1]) - 0.01*(y2[i,j+1] - 2*y2[i,j] + y2[i,j-1])) + dt * ((0.5+0.055*np.sin(n*dt))*yz[i,j]*(1-yz[i,j]/5000000-0.3*y1[i,j]/3000000) - 0.08*yz[i,j] - 0.0012/100000*yz[i,j]*y2[i,j])
            y2_new[i,j] = y2[i,j] + dt / (dx**2) * ds2[i,j] * (0.03*(y1[i+1,j] - 2*y1[i,j] + y1[i-1,j]) + 0.03*(yz[i+1,j] - 2*yz[i,j] + yz[i-1,j]) - 0.2*(y3[i+1,j] - 2*y3[i,j] + y3[i-1,j]) + 0.08*(ys[i+1,j] - 2*ys[i,j] + ys[i-1,j])) + dt / (dy**2) * ds2[i,j] * (0.03*(y1[i,j+1] - 2*y1[i,j] + y1[i,j-1]) + 0.03*(yz[i,j+1] - 2*yz[i,j] + yz[i,j-1]) - 0.2*(y3[i,j+1] - 2*y3[i,j] + y3[i,j-1]) + 0.08*(ys[i,j+1] - 2*ys[i,j] + ys[i,j-1])) + dt * ((0.5+0.055*np.sin(n*dt))*y2[i,j]*(1-y2[i,j]/(950000+(n*dt*10000/2/3.14)%10000)) - 0.0015/1000*y2[i,j]*y3[i,j] - 0.125*y2[i,j] + 0.0008*y1[i,j] + 0.0006*yz[i,j] - 0.35*y2[i,j] - 0.001*y2[i,j]*ys[i,j])
            y3_new[i,j] = y3[i,j] + dt / (dx**2) * 0.9 * (0.3*(y2[i+1,j] - 2*y2[i,j] + y2[i-1,j]) - 0.1*(yo[i+1,j] - 2*yo[i,j] + yo[i-1,j]) + 0.0072*(ys[i+1,j] - 2*ys[i,j] + ys[i-1,j])) + dt / (dy**2) * 0.9 * (0.3*(y2[i,j+1] - 2*y2[i,j] + y2[i,j-1]) - 0.1*(yo[i,j+1] - 2*yo[i,j] + yo[i,j-1]) + 0.0072*(ys[i,j+1] - 2*ys[i,j] + ys[i,j-1])) + dt * ((0.25+0.02*np.sin(n*dt))*y3[i,j]*(1-y3[i,j]/50000) - 0.1*y3[i,j] + 0.0011*y2[i,j] - 0.00003*y3[i,j]*yo[i,j] + 0.1*ys[i,j])
            yo_new[i,j] = yo[i,j] + dt / (dx**2) * 0.9 * (0.02*(y3[i+1,j] - 2*y3[i,j] + y3[i-1,j]) + 0.1*(y2[i+1,j] - 2*y2[i,j] + y2[i-1,j]) + 0.15*(ys[i+1,j] - 2*ys[i,j] + ys[i-1,j])) + dt / (dy**2) * 0.9 * (0.02*(y3[i,j+1] - 2*y3[i,j] + y3[i,j-1]) + 0.1*(y2[i,j+1] - 2*y2[i,j] + y2[i,j-1]) + 0.15*(ys[i,j+1] - 2*ys[i,j] + ys[i,j-1])) + dt * ((0.3)*yo[i,j]*(1 - yo[i,j]/1000) - 0.1*yo[i,j] + 0.2*y3[i,j] + 0.03*ys[i,j] + 0.01*y2[i,j])
            ys_new[i,j] = ys[i,j] + dt / (dx**2) * dss[i,j] * (0.00002*(y2[i+1,j] - 2*y2[i,j] + y2[i-1,j]) - 0.01*(yo[i+1,j] - 2*yo[i,j] + yo[i-1,j]) - 0.000075*(y3[i+1,j] - 2*y3[i,j] + y3[i-1,j])) + dt / (dy**2) * dss[i,j] * (0.00002*(y2[i,j+1] - 2*y2[i,j] + y2[i,j-1]) - 0.01*(yo[i,j+1] - 2*yo[i,j] + yo[i,j-1]) - 0.000075*(y3[i,j+1] - 2*y3[i,j] + y3[i,j-1])) + dt * ((0.6)*ys[i,j]*(1 - ys[i,j]/75000 - 0.02*y3[i,j]/50000) - 0.0002*ys[i,j]*yo[i,j] - 0.0001*ys[i,j]*y3[i,j] + 0.015*y2[i,j] - 0.1*ys[i,j] - 0.3*ys[i,j])
            num_1=num_1+y1_new[i,j]/64
            num_2=num_2+y2_new[i,j]/64
            num_3=num_3+y3_new[i,j]/64
            num_z=num_z+yz_new[i,j]/64
            num_s=num_s+ys_new[i,j]/64
            num_o=num_o+yo_new[i,j]/64
            num_d=num_d+yd_new[i,j]/64
    y1=y1_new
    y2=y2_new
    y3=y3_new
    yz=yz_new
    yd=yd_new
    ys=ys_new
    yo=yo_new
    y=num_1+num_2+num_3+num_z+num_d+num_s+num_z
    p1=num_1/y
    p2=num_2/y
    pz=num_z/y
    p3=num_3/y
    pd=num_d/y
    ps=num_s/y
    po=num_o/y
    H=p1*np.log(p1)+p2*np.log(p2)+pz*np.log(pz)+p3*np.log(p3)+pd*np.log(pd)+po*np.log(po)+ps*np.log(ps)
    H=-H
    print(H,num_1,num_2)

# 可视化结果
print(y1)
print(y2)
print(yz)
print(y3)
print(yd)
print(ys)
print(yo)
print(u)

y=y1+y2+y3+yz+yd+ys+yo
p1=y1/y
p2=y2/y
pz=yz/y
p3=y3/y
pd=yd/y
ps=ys/y
po=yo/y
H=p1*np.log(p1)+p2*np.log(p2)+pz*np.log(pz)+p3*np.log(p3)+pd*np.log(pd)
H=-H

plt.imshow(y1, origin='lower', cmap='magma')
plt.colorbar(label='Temperature')
plt.title('Temperature Distribution Heatmap')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.show()
